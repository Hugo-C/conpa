DROP TABLE IF EXISTS Card;
DROP TABLE IF EXISTS Family;
DROP TABLE IF EXISTS CardGame;
DROP TABLE IF EXISTS Users;

CREATE TABLE IF NOT EXISTS CardGame(
  id INT UNSIGNED AUTO_INCREMENT,
  name VARCHAR(20),
  language VARCHAR(20),
  author VARCHAR(20) NOT NULL,
  description TEXT,
  PRIMARY KEY(id),
  UNIQUE INDEX uniq_cardgame (name, language));

CREATE TABLE IF NOT EXISTS Tags(
  tag VARCHAR(50),
  PRIMARY KEY(tag));

CREATE TABLE IF NOT EXISTS HasTags(
  cardGame INT UNSIGNED,
  tag VARCHAR(50),
  FOREIGN KEY (cardGame) REFERENCES CardGame(id) ON DELETE CASCADE,
  FOREIGN KEY (tag) REFERENCES Tags(tag) ON DELETE CASCADE);

CREATE TABLE IF NOT EXISTS Family(
  id INT UNSIGNED AUTO_INCREMENT,
  name VARCHAR(20) NOT NULL,
  logo VARCHAR(20) DEFAULT NULL,
  cardGame INT UNSIGNED NOT NULL,
  PRIMARY KEY(id),
  FOREIGN KEY (cardGame) REFERENCES CardGame(id) ON DELETE CASCADE);

CREATE TABLE IF NOT EXISTS Card(
  id INT UNSIGNED AUTO_INCREMENT,
  content TEXT NOT NULL,
  description TEXT,
  family INT UNSIGNED NOT NULL,
  PRIMARY KEY(id),
  FOREIGN KEY (family) REFERENCES Family(id) ON DELETE CASCADE);

CREATE TABLE IF NOT EXISTS Users(
  pseudo VARCHAR(20),
  password CHAR(32) NOT NULL,
  email VARCHAR(255) NOT NULL,
  token CHAR(32),
  tokenExpiration DATETIME,
  status CHAR(1) DEFAULT 0,
  PRIMARY KEY(pseudo),
  UNIQUE INDEX uniq_email (email(190)));

CREATE TABLE IF NOT EXISTS Party(
  id INT UNSIGNED AUTO_INCREMENT,
  name VARCHAR(30),
  animator VARCHAR(20),
  gameDate DATETIME,
  PRIMARY KEY(id));

CREATE TABLE IF NOT EXISTS Production(
  id INT UNSIGNED AUTO_INCREMENT,
  production TEXT NOT NULL,
  legend TEXT NOT NULL,
  PRIMARY KEY (id));

CREATE TABLE IF NOT EXISTS HasPlayedIn(
  pseudo VARCHAR(20) NOT NULL,
  idParty INT UNSIGNED NOT NULL,
  question TEXT,
  idProd INT UNSIGNED,
  FOREIGN KEY (pseudo) REFERENCES Users(pseudo) ON DELETE CASCADE,
  FOREIGN KEY (idParty) REFERENCES Party(id) ON DELETE CASCADE,
  FOREIGN KEY (idProd) REFERENCES Production(id) ON DELETE SET NULL);

CREATE TABLE IF NOT EXISTS IsArchived(
  idParty INT UNSIGNED NOT NULL,
  idProd INT UNSIGNED NOT NULL,
  pseudo VARCHAR(20) NOT NULL,
  date DATETIME NOT NULL,
  FOREIGN KEY (pseudo) REFERENCES Users(pseudo) ON DELETE CASCADE,
  FOREIGN KEY (idParty) REFERENCES Party(id) ON DELETE CASCADE,
  FOREIGN KEY (idProd) REFERENCES Production(id) ON DELETE CASCADE
  UNIQUE INDEX uniq_archive_at_date (date, pseudo));

DELETE TRIGGER IF NOT EXISTS AfterDeleteHistoricEntry;

DELIMITER |
CREATE TRIGGER AfterDeleteHistoricEntry AFTER DELETE
ON HasPlayedIn FOR EACH ROW
BEGIN
  DECLARE cpt INTEGER;

  SELECT COUNT(*) INTO cpt
  FROM HasPlayedIn
  WHERE idParty = OLD.idParty;

  IF cpt = 0 THEN
    DELETE FROM Party
    WHERE id = OLD.idParty;
  END IF;
END|
DELIMITER ;
